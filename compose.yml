services:
  web:
    build: .
    ports:
      - "127.0.0.1:${API_PORT:-8000}:8000"
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
      migraions:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db
    command: ["fastapi", "run", "--workers", "4", "app/main.py"]

  migraions:
    build: .
    env_file:
      - .env
    environment:
      - POSTGRES_SERVER=db      
    depends_on:
      - db
    command: ["alembic", "upgrade", "head"]
  db:
    image: postgres:16-alpine
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    profiles: ['dev', 'adminer']

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"
      - "1025:1025"
    restart: always
    profiles: ['dev', 'mailcatcher']


volumes:
  app-db-data: